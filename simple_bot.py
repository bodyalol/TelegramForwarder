from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.types import Message
import logging
import os
import asyncio
from keep_alive import keep_alive

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–¥–∞–Ω–∏–π —Ç–æ–∫–µ–Ω
TOKEN = "8422633253:AAEYmPqmyFGe4-KmB4RJMTPYSzcMltmqAOc"
FORWARD_CHAT_ID = -1001234567890  # chat_id –∫—É–¥–∏ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏ —Ñ–æ—Ç–æ

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"""
    try:
        await message.reply("–î—è–∫—É—é, —è –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤—ñ–π —Å–∫—Ä—ñ–Ω—à–æ—Ç! üì∏")
        await bot.forward_message(FORWARD_CHAT_ID, message.chat.id, message.message_id)
        logger.info(f"–§–æ—Ç–æ –≤—ñ–¥ {message.from_user.username} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ")

@dp.message(Command("start"))
async def handle_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç —ñ —è –π–æ–≥–æ –ø–µ—Ä–µ—à–ª—é üì∏")

@dp.message()
async def handle_other(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    await message.reply("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è) üñº")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ keep-alive –¥–ª—è Replit
        keep_alive()
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤–∏–π!")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
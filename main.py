from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.exceptions import TelegramAPIError
import logging
import os
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
FORWARD_CHAT_ID = os.getenv("FORWARD_CHAT_ID")

if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    exit(1)

try:
    FORWARD_CHAT_ID = int(FORWARD_CHAT_ID)
except (ValueError, TypeError):
    logger.error("FORWARD_CHAT_ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
    exit(1)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π."""
    try:
        await message.reply("–î—è–∫—É—é, —è –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤—ñ–π —Å–∫—Ä—ñ–Ω—à–æ—Ç! üì∏")
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ –≤—ñ–¥ {message.from_user.id} (@{message.from_user.username})")

        await bot.forward_message(
            chat_id=FORWARD_CHAT_ID,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        logger.info(f""–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç ‚úÖ" {FORWARD_CHAT_ID}")

    except TelegramAPIError as e:
        logger.error(f""–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.": {e}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ: {e}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(F.document)
async def handle_document(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤."""
    try:
        if message.document.mime_type and message.document.mime_type.startswith("image/"):
            await message.reply("–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç. –û–∂–∏–¥–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∏–≥—Ä–æ–π. üéÆ")
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è-–¥–æ–∫—É–º–µ–Ω—Ç –≤—ñ–¥ {message.from_user.id} (@{message.from_user.username})")

            await bot.forward_message(
                chat_id=FORWARD_CHAT_ID,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            logger.info(f"–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç. –û–∂–∏–¥–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∏–≥—Ä–æ–π. üéÆ {FORWARD_CHAT_ID}")
        else:
            await message.reply("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è) üñº")

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(Command("start"))
@dp.message(Command("help"))
async def handle_start_help(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ /start —Ç–∞ /help."""
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
"–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. üéÆ\n"
"–í—Å—ë –ø—Ä–æ—Å—Ç–æ: –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –æ–ø–ª–∞—Ç—É.\n"
"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å —Å–≤–æ—é –∏–≥—Ä—É! üöÄ\n\n"
"–ö–æ–º–∞–Ω–¥—ã:\n"
"/start - –ù–∞—á–∞—Ç—å\n"
"/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"

    )
    await message.reply(welcome_text)

@dp.message()
async def handle_other(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    await message.reply("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ üñº")

async def on_startup(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("–í–∏–¥–∞–ª—è—é —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫ (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –∑ polling)...")
    await bot.delete_webhook(drop_pending_updates=True)
    bot_info = await bot.get_me()
    logger.info(f"–ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—â–µ–Ω–æ —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")

async def on_shutdown(bot: Bot):
    """–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    await bot.session.close()

async def main():
    await on_startup(bot)
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown(bot)

if __name__ == "__main__":
    asyncio.run(main())

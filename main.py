from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.exceptions import TelegramAPIError, TelegramNetworkError
import logging
import os
import asyncio
from keep_alive import keep_alive

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–¥–∞–Ω–∏–π —Ç–æ–∫–µ–Ω
TOKEN = "8422633253:AAEYmPqmyFGe4-KmB4RJMTPYSzcMltmqAOc"

# Chat ID –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏
FORWARD_CHAT_ID = os.getenv("FORWARD_CHAT_ID", "-1001234567890")

try:
    FORWARD_CHAT_ID = int(FORWARD_CHAT_ID)
except ValueError:
    logger.error("FORWARD_CHAT_ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
    exit(1)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(F.photo)
async def handle_photo(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π. –î—è–∫—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ç–∞ –ø–µ—Ä–µ—Å–∏–ª–∞—î —Ñ–æ—Ç–æ —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Ç.
    """
    try:
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        await message.reply("–î—è–∫—É—é, —è –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤—ñ–π —Å–∫—Ä—ñ–Ω—à–æ—Ç! üì∏")
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id} (@{message.from_user.username})")
        
        # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Ç
        await bot.forward_message(
            chat_id=FORWARD_CHAT_ID,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        logger.info(f"–§–æ—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —É —á–∞—Ç {FORWARD_CHAT_ID}")
        
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ: {e}")
        await message.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ: {e}")
        await message.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message(F.document)
async def handle_document(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ.
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ–∫—É–º–µ–Ω—Ç —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
        if message.document.mime_type and message.document.mime_type.startswith('image/'):
            # –û–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            await message.reply("–î—è–∫—É—é, —è –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤—ñ–π —Å–∫—Ä—ñ–Ω—à–æ—Ç! üì∏")
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è-–¥–æ–∫—É–º–µ–Ω—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id} (@{message.from_user.username})")
            
            # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Ç
            await bot.forward_message(
                chat_id=FORWARD_CHAT_ID,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            logger.info(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è-–¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —É —á–∞—Ç {FORWARD_CHAT_ID}")
        else:
            # –¶–µ –Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            await message.reply("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è) üñº")
            
    except TelegramAPIError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message(Command("start"))
@dp.message(Command("help"))
async def handle_start_help(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ /start —Ç–∞ /help
    """
    try:
        welcome_text = (
            "–ü—Ä–∏–≤—ñ—Ç! üëã\n"
            "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤.\n"
            "–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç, —ñ —è –π–æ–≥–æ –æ–±—Ä–æ–±–ª—è—é! üì∏\n\n"
            "–ö–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–ø–æ–º–æ–≥—É"
        )
        await message.reply(welcome_text)
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id} (@{message.from_user.username})")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}")

@dp.message()
async def handle_other(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    """
    try:
        await message.reply("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è) üñº")
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ-—Ñ–æ—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id} (@{message.from_user.username})")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–µ-—Ñ–æ—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

async def on_startup():
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    try:
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞: {e}")

async def on_shutdown():
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞
    """
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    await bot.session.close()

async def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    """
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ keep-alive —Å–µ—Ä–≤–µ—Ä –¥–ª—è Replit
        keep_alive()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await on_startup()
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())

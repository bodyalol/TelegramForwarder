from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramAPIError
import logging
import os
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
FORWARD_CHAT_ID = os.getenv("FORWARD_CHAT_ID")

if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

try:
    FORWARD_CHAT_ID = int(FORWARD_CHAT_ID)
except (ValueError, TypeError):
    logger.error("FORWARD_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    exit(1)

# –ü–∞–º—è—Ç—å —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_payment_status = {}  # user_id: "no_photo", "processing", "confirmed"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é")],
        [KeyboardButton(text="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã")]
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–µ—Ç–∞ —Ä–∞–±–æ—Ç—ã –≤ —á—É–∂–∏—Ö —á–∞—Ç–∞—Ö
async def check_chat_allowed(message: Message) -> bool:
    return message.chat.type == "private" or message.chat.id == FORWARD_CHAT_ID

@dp.message(Command("start"))
async def cmd_start(message: Message):
    if not await check_chat_allowed(message):
        return
    user_payment_status[message.from_user.id] = "no_photo"
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. üéÆ\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=main_keyboard
    )

@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é")
async def ask_for_photo(message: Message):
    if not await check_chat_allowed(message):
        return
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ üì∏")

@dp.message(F.photo)
async def handle_photo(message: Message):
    if not await check_chat_allowed(message):
        return
    user_payment_status[message.from_user.id] = "processing"
    await message.reply("–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. ‚è≥")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {message.from_user.id} (@{message.from_user.username})")
    try:
        await bot.forward_message(
            chat_id=FORWARD_CHAT_ID,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(F.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã")
async def check_status(message: Message):
    if not await check_chat_allowed(message):
        return
    status = user_payment_status.get(message.from_user.id, "no_photo")
    if status == "no_photo":
        await message.reply("–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é üì∏")
    elif status == "processing":
        await message.reply("–í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ ‚è≥")
    elif status == "confirmed":
        await message.reply("‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É.")
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –µ—â—ë —Ä–∞–∑.")

@dp.message()
async def handle_other(message: Message):
    if not await check_chat_allowed(message):
        return
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=main_keyboard)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
